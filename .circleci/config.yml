version: 2.1

orbs:
  docker: circleci/docker@2.4.0
  aws-cli: circleci/aws-cli@4.0
  aws-ecr: circleci/aws-ecr@9.0.1

jobs:
  create-cluster:
    docker:
      - image: circleci/python:3.8
    steps:
      - checkout
      - run:
          name: Install tools
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install

            curl --silent --location "https://dl.k8s.io/release/$(curl --silent --location https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl" --output kubectl
            sudo install kubectl /usr/local/bin/

            sudo curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
            sudo mv /tmp/eksctl /usr/local/bin
      - run: 
          name: Create EKS cluster if not exist
          command: |
            if eksctl get cluster --region=us-east-1 --name "capstone"
            then
              echo "Cluster capstone is existed"
            else
              eksctl create cluster -f eks/cluster.yaml
              kubectl get nodes
              aws s3 cp ~/.kube/config s3://trunght1-capstone/kubeconfig
              cat ~/.kube/config
            fi

  clean-build:
    docker:
      - image: maven:3.5.3-jdk-8-alpine
    steps:
      - checkout
      - run:
          name: clean install
          command: mvn clean install -DskipTests

  test:
    docker:
      - image: maven:3.5.3-jdk-8-alpine
    steps:
      - checkout
      - run:
          name: test code
          command: mvn test

  build-and-push-image:
    executor: docker/docker
    steps:
      - setup_remote_docker
      - checkout
      - docker/check
      - docker/build:
          image: hatrongtrung/capstone-cloud-devops-${CIRCLE_WORKFLOW_ID:0:7}
      - aws-ecr/build_and_push_image:
          auth:
            - aws-cli/setup
          repo: capstone

  deploy:
    docker:
      - image: circleci/python:3.8
    steps:
      - checkout
      - run:
          name: Install tools
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install

            curl --silent --location "https://dl.k8s.io/release/$(curl --silent --location https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl" --output kubectl
            sudo install kubectl /usr/local/bin/
      - run:
          name: Get config
          command: |
            aws s3 cp s3://trunght1-capstone/kubeconfig ~/.kube/config
            export KUBECONFIG=$KUBECONFIG:~/.kube/config
            kubectl get nodes
      - run:
          name: Deploy to cluster
          command: |
            NS=$(kubectl get namespace trunght-capstone | awk '{print $1}' | grep -v NAME)
            echo $NS
            if [ "$NS" = "trunght-capstone" ]
            then
              echo "Namespace exists"
            else
              echo "Creating Namespace"
              kubectl create namespace trunght-capstone
            fi
            kubectl config set-context --current --namespace=trunght-capstone
            kubectl apply -f deployment.yaml -n trunght-capstone
            kubectl get deployments -n trunght-capstone

            LB_URL=$(kubectl get services -n trunght-capstone trunght-service -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
            echo "URL: $LB_URL"
            echo "$LB_URL" > url.txt
            aws s3 cp url.txt s3://trunght1-capstone/url.txt

            # redeploy if docker-image was changed
            kubectl -n capstone-cloud-devops set image deployment/trunght-deployment trunght=814024668676.dkr.ecr.us-east-1.amazonaws.com/capstone:v1
            
            kubectl -n capstone-cloud-devops get nodes
            kubectl -n capstone-cloud-devops get pods
            kubectl -n capstone-cloud-devops rollout status deployment trunght-deployment

  smoke-test:
    docker:
      - image: circleci/python:3.8
    steps:
      - checkout
      - run:
          name: Smoke test.
          command: |
            export APP_URL=$(cat url.txt)
            export APP_ENDPOINT="http://${APP_URL}:8080/"
            sleep 10s
            if curl ${APP_ENDPOINT} | grep "Hello"
            then
              exit 0
            else
              exit 1
            fi

workflows:
  default:
    jobs:
      - create-cluster
      - clean-build
      - test:
          requires: [clean-build]
      - build-and-push-image:
          requires: [test]
      - deploy:
          requires: [build-and-push-image, create-cluster]
      - smoke-test:
          requires: [deploy]